"""Add preference groups.

Revision ID: e49fdb0c3016
Revises: 0a9efe93f82e
Create Date: 2025-06-15 12:08:58.549767

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = 'e49fdb0c3016'
down_revision: Union[str, None] = '0a9efe93f82e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('preference_groups',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('battery_charge_min_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('battery_max_temperature', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('run_on_batteries', sa.Boolean(), nullable=False),
    sa.Column('run_if_user_active', sa.Boolean(), nullable=False),
    sa.Column('run_gpu_if_user_active', sa.Boolean(), nullable=False),
    sa.Column('suspend_if_no_recent_input', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('idle_time_to_run', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('start_hour', sa.Numeric(precision=8, scale=6), nullable=False),
    sa.Column('end_hour', sa.Numeric(precision=8, scale=6), nullable=False),
    sa.Column('net_start_hour', sa.Numeric(precision=8, scale=6), nullable=False),
    sa.Column('net_end_hour', sa.Numeric(precision=8, scale=6), nullable=False),
    sa.Column('leave_apps_in_memory', sa.Boolean(), nullable=False),
    sa.Column('max_ncpus_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('niu_max_ncpus_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('cpu_usage_limit', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('niu_cpu_usage_limit', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('suspend_cpu_usage', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('niu_suspend_cpu_usage', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('cpu_scheduling_period_minutes', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('max_cpus', sa.Integer(), nullable=False),
    sa.Column('work_buf_min_days', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('work_buf_additional_days', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('disk_interval', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('disk_max_used_gb', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('disk_max_used_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('disk_min_free_gb', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('vm_max_used_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('ram_max_used_busy_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('ram_max_used_idle_pct', sa.Numeric(precision=9, scale=6), nullable=False),
    sa.Column('confirm_before_connecting', sa.Boolean(), nullable=False),
    sa.Column('hangup_if_dialed', sa.Boolean(), nullable=False),
    sa.Column('max_bytes_sec_up', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('max_bytes_sec_down', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('daily_xfer_limit_mb', sa.Numeric(precision=18, scale=6), nullable=False),
    sa.Column('daily_xfer_period_days', sa.Integer(), nullable=False),
    sa.Column('network_wifi_only', sa.Boolean(), nullable=False),
    sa.Column('dont_verify_images', sa.Boolean(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_preference_groups_is_default'), 'preference_groups', ['is_default'], unique=False)
    op.create_index(op.f('ix_preference_groups_name'), 'preference_groups', ['name'], unique=False)
    op.create_index(op.f('ix_preference_groups_user_id'), 'preference_groups', ['user_id'], unique=False)
    op.add_column('computers', sa.Column('preference_group_id', sa.Uuid(), nullable=True))
    op.create_index(op.f('ix_computers_preference_group_id'), 'computers', ['preference_group_id'], unique=False)
    op.create_foreign_key(None, 'computers', 'preference_groups', ['preference_group_id'], ['id'], ondelete='SET NULL')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'computers', type_='foreignkey')
    op.drop_index(op.f('ix_computers_preference_group_id'), table_name='computers')
    op.drop_column('computers', 'preference_group_id')
    op.drop_index(op.f('ix_preference_groups_user_id'), table_name='preference_groups')
    op.drop_index(op.f('ix_preference_groups_name'), table_name='preference_groups')
    op.drop_index(op.f('ix_preference_groups_is_default'), table_name='preference_groups')
    op.drop_table('preference_groups')
    # ### end Alembic commands ###
