"""Migrate account keys to no longer be computer-specific.

Revision ID: 4ce5569175a5
Revises: fa92293bd7f5
Create Date: 2025-06-12 21:50:45.257475

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel.sql.sqltypes


# revision identifiers, used by Alembic.
revision: str = '4ce5569175a5'
down_revision: Union[str, None] = 'fa92293bd7f5'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user_project_keys',
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Uuid(), nullable=False),
    sa.Column('project_id', sa.Uuid(), nullable=False),
    sa.Column('account_key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'project_id')
    )
    op.create_index(op.f('ix_user_project_keys_project_id'), 'user_project_keys', ['project_id'], unique=False)
    op.create_index(op.f('ix_user_project_keys_user_id'), 'user_project_keys', ['user_id'], unique=False)

    # Migrate existing account keys.
    connection = op.get_bind()

    # Get unique user-project combinations with account keys.
    result = connection.execute(sa.text("""
        SELECT DISTINCT
            c.user_id,
            pa.project_id,
            pa.account_key,
            NOW() as created_at,
            NOW() as updated_at,
            gen_random_uuid() as id
        FROM project_attachments pa
        JOIN computers c ON pa.computer_id = c.id
        WHERE pa.account_key != ''
    """))

    # Insert into user_project_keys table.
    for row in result:
        try:
            connection.execute(sa.text("""
                INSERT INTO user_project_keys (id, created_at, updated_at, user_id, project_id, account_key)
                VALUES (:id, :created_at, :updated_at, :user_id, :project_id, :account_key)
                ON CONFLICT (user_id, project_id) DO NOTHING
            """), {
                'id': row.id,
                'created_at': row.created_at,
                'updated_at': row.updated_at,
                'user_id': row.user_id,
                'project_id': row.project_id,
                'account_key': row.account_key
            })
        except Exception:
            pass

    op.drop_column('project_attachments', 'account_key')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('project_attachments', sa.Column('account_key', sa.VARCHAR(), autoincrement=False, nullable=False))

    # Migrate data back to project_attachments.
    connection = op.get_bind()

    connection.execute(sa.text("""
        UPDATE project_attachments pa
        SET account_key = upk.account_key
        FROM user_project_keys upk
        JOIN computers c ON c.user_id = upk.user_id
        WHERE pa.computer_id = c.id AND pa.project_id = upk.project_id
    """))

    op.drop_index(op.f('ix_user_project_keys_user_id'), table_name='user_project_keys')
    op.drop_index(op.f('ix_user_project_keys_project_id'), table_name='user_project_keys')
    op.drop_table('user_project_keys')
    # ### end Alembic commands ###
